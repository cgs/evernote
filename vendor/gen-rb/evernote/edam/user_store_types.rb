#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'types_types'
require 'errors_types'


module Evernote
  module EDAM
    module UserStore
            module SponsoredGroupRole
              GROUP_MEMBER = 1
              GROUP_ADMIN = 2
              GROUP_OWNER = 3
              VALUE_MAP = {1 => "GROUP_MEMBER", 2 => "GROUP_ADMIN", 3 => "GROUP_OWNER"}
              VALID_VALUES = Set.new([GROUP_MEMBER, GROUP_ADMIN, GROUP_OWNER]).freeze
            end

            #  This structure is used to provide publicly-available user information
            #  about a particular account.
            # <dl>
            #  <dt>userId:</dt>
            #    <dd>
            #    The unique numeric user identifier for the user account.
            #    </dd>
            #  <dt>shardId:</dt>
            #    <dd>
            #    The name of the virtual server that manages the state of
            #    this user. This value is used internally to determine which system should
            #    service requests about this user's data.  It is also used to construct
            #    the appropriate URL to make requests from the NoteStore.
            #    </dd>
            #  <dt>privilege:</dt>
            #    <dd>
            #    The privilege level of the account, to determine whether
            #    this is a Premium or Free account.
            #    </dd>
            #  </dl>
            class PublicUserInfo
              include ::Thrift::Struct, ::Thrift::Struct_Union
              USERID = 1
              SHARDID = 2
              PRIVILEGE = 3
              USERNAME = 4

              FIELDS = {
                USERID => {:type => ::Thrift::Types::I32, :name => 'userId'},
                SHARDID => {:type => ::Thrift::Types::STRING, :name => 'shardId'},
                PRIVILEGE => {:type => ::Thrift::Types::I32, :name => 'privilege', :optional => true, :enum_class => Evernote::EDAM::Type::PrivilegeLevel},
                USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username', :optional => true}
              }

              def struct_fields; FIELDS; end

              def validate
                raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
                raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field shardId is unset!') unless @shardId
                unless @privilege.nil? || Evernote::EDAM::Type::PrivilegeLevel::VALID_VALUES.include?(@privilege)
                  raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field privilege!')
                end
              end

              ::Thrift::Struct.generate_accessors self
            end

            #  This structure is used to provide information about a user's Premium account.
            # <dl>
            #  <dt>currentTime:</dt>
            #    <dd>
            #    The server-side date and time when this data was generated.
            #    </dd>
            #  <dt>premium:</dt>
            #    <dd>
            # 	 True if the user's account is Premium.
            #    </dd>
            #  <dt>premiumRecurring</dt>
            #    <dd>
            #    True if the user's account is Premium and has a recurring payment method.
            #    </dd>
            #  <dt>premiumExpirationDate:</dt>
            #    <dd>
            #    The date when the user's Premium account expires, or the date when the user's
            #    account will be charged if it has a recurring payment method.
            #    </dd>
            #  <dt>premiumExtendable:</dt>
            #    <dd>
            #    True if the user is eligible for purchasing Premium account extensions.
            #    </dd>
            #  <dt>premiumPending:</dt>
            #    <dd>
            #    True if the user's Premium account is pending payment confirmation
            #    </dd>
            #  <dt>premiumCancellationPending:</dt>
            #    <dd>
            #    True if the user has requested that no further charges to be made; the Premium
            #    account will remain active until it expires.
            #    </dd>
            #  <dt>canPurchaseUploadAllowance:</dt>
            #    <dd>
            #    True if the user is eligible for purchasing additional upload allowance.
            #    </dd>
            #  <dt>sponsoredGroupName:</dt>
            #    <dd>
            #    The name of the sponsored group that the user is part of.
            #    </dd>
            #  <dt>sponsoredGroupRole:</dt>
            #    <dd>
            #    The role of the user within a sponsored group.
            #    </dd>
            #  </dl>
            class PremiumInfo
              include ::Thrift::Struct, ::Thrift::Struct_Union
              CURRENTTIME = 1
              PREMIUM = 2
              PREMIUMRECURRING = 3
              PREMIUMEXPIRATIONDATE = 4
              PREMIUMEXTENDABLE = 5
              PREMIUMPENDING = 6
              PREMIUMCANCELLATIONPENDING = 7
              CANPURCHASEUPLOADALLOWANCE = 8
              SPONSOREDGROUPNAME = 9
              SPONSOREDGROUPROLE = 10

              FIELDS = {
                CURRENTTIME => {:type => ::Thrift::Types::I64, :name => 'currentTime'},
                PREMIUM => {:type => ::Thrift::Types::BOOL, :name => 'premium'},
                PREMIUMRECURRING => {:type => ::Thrift::Types::BOOL, :name => 'premiumRecurring'},
                PREMIUMEXPIRATIONDATE => {:type => ::Thrift::Types::I64, :name => 'premiumExpirationDate', :optional => true},
                PREMIUMEXTENDABLE => {:type => ::Thrift::Types::BOOL, :name => 'premiumExtendable'},
                PREMIUMPENDING => {:type => ::Thrift::Types::BOOL, :name => 'premiumPending'},
                PREMIUMCANCELLATIONPENDING => {:type => ::Thrift::Types::BOOL, :name => 'premiumCancellationPending'},
                CANPURCHASEUPLOADALLOWANCE => {:type => ::Thrift::Types::BOOL, :name => 'canPurchaseUploadAllowance'},
                SPONSOREDGROUPNAME => {:type => ::Thrift::Types::STRING, :name => 'sponsoredGroupName', :optional => true},
                SPONSOREDGROUPROLE => {:type => ::Thrift::Types::I32, :name => 'sponsoredGroupRole', :optional => true, :enum_class => Evernote::EDAM::UserStore::SponsoredGroupRole}
              }

              def struct_fields; FIELDS; end

              def validate
                raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field currentTime is unset!') unless @currentTime
                raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field premium is unset!') if @premium.nil?
                raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field premiumRecurring is unset!') if @premiumRecurring.nil?
                raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field premiumExtendable is unset!') if @premiumExtendable.nil?
                raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field premiumPending is unset!') if @premiumPending.nil?
                raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field premiumCancellationPending is unset!') if @premiumCancellationPending.nil?
                raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field canPurchaseUploadAllowance is unset!') if @canPurchaseUploadAllowance.nil?
                unless @sponsoredGroupRole.nil? || Evernote::EDAM::UserStore::SponsoredGroupRole::VALID_VALUES.include?(@sponsoredGroupRole)
                  raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field sponsoredGroupRole!')
                end
              end

              ::Thrift::Struct.generate_accessors self
            end

            #  When an authentication (or re-authentication) is performed, this structure
            #  provides the result to the client.
            # <dl>
            #  <dt>currentTime:</dt>
            #    <dd>
            #    The server-side date and time when this result was
            #    generated.
            #    </dd>
            #  <dt>authenticationToken:</dt>
            #    <dd>
            #    Holds an opaque, ASCII-encoded token that can be
            #    used by the client to perform actions on a NoteStore.
            #    </dd>
            #  <dt>expiration:</dt>
            #    <dd>
            #    Holds the server-side date and time when the
            #    authentication token will expire.
            #    This time can be compared to "currentTime" to produce an expiration
            #    time that can be reconciled with the client's local clock.
            #    </dd>
            #  <dt>user:</dt>
            #    <dd>
            #    Holds the information about the account which was
            #    authenticated if this was a full authentication.  May be absent if this
            #    particular authentication did not require user information.
            #    </dd>
            #  <dt>publicUserInfo:</dt>
            #    <dd>
            #    If this authentication result was achieved without full permissions to
            #    access the full User structure, this field may be set to give back
            #    a more limited public set of data.
            #    </dd>
            #  </dl>
            class AuthenticationResult
              include ::Thrift::Struct, ::Thrift::Struct_Union
              CURRENTTIME = 1
              AUTHENTICATIONTOKEN = 2
              EXPIRATION = 3
              USER = 4
              PUBLICUSERINFO = 5

              FIELDS = {
                CURRENTTIME => {:type => ::Thrift::Types::I64, :name => 'currentTime'},
                AUTHENTICATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authenticationToken'},
                EXPIRATION => {:type => ::Thrift::Types::I64, :name => 'expiration'},
                USER => {:type => ::Thrift::Types::STRUCT, :name => 'user', :class => Evernote::EDAM::Type::User, :optional => true},
                PUBLICUSERINFO => {:type => ::Thrift::Types::STRUCT, :name => 'publicUserInfo', :class => Evernote::EDAM::UserStore::PublicUserInfo, :optional => true}
              }

              def struct_fields; FIELDS; end

              def validate
                raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field currentTime is unset!') unless @currentTime
                raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authenticationToken is unset!') unless @authenticationToken
                raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field expiration is unset!') unless @expiration
              end

              ::Thrift::Struct.generate_accessors self
            end

          end
        end
      end
